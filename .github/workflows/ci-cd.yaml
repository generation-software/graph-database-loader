# Copyright Jiaqi (Hutao of Emberfire)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: CI/CD

"on":
  pull_request:
  push:
    branches:
      - master

env:
  PYTHON_VERSION: "3.10"
  NEO4J_ENTERPRISE_VERSION: 5.24-enterprise
  TEST_NEO4J_URI: neo4j://localhost:7687
  TEST_NEO4J_DATABASE: neo4j
  TEST_NEO4J_USERNAME: not used
  TEST_NEO4J_PASSWORD: not used

jobs:
  cancel-previous:
    name: Cancel Previous Runs In Order to Allocate Action Resources Immediately for Current Run
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous
        uses: styfle/cancel-workflow-action@0.10.1
        with:
          access_token: ${{ github.token }}

  yaml-lint:
    name: YAML Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionshub/yamllint@main

  markdown-lint:
    name: Markdown Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actionshub/markdownlint@main

  linkChecker:
    name: Link Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Link Checker
        uses: lycheeverse/lychee-action@v1.9.0
        with:
          fail: true

  code-style:
    name: Python Code Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: PEP 8 check
        run: python setup.py pep8
      - name: Check import orders
        run: python setup.py isort

  tests-wilhelm-vocabulary-loading:
    name: Test wilhelm-vocabulary data loading
    needs: [yaml-lint, markdown-lint, linkChecker, code-style]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [
          {
            name: German,
            load-script: wilhelm_vocabulary/load_german.py
          },
          {
            name: Ancient Greek,
            load-script: wilhelm_vocabulary/load_ancient_greek.py
          },
          {
            name: Latin,
            load-script: wilhelm_vocabulary/load_latin.py
          },
          {
            name: all languages (race condition test ①),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ②),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ③),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ④),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑤),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑥),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑦),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑧),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑨),
          },
          {
            name: all languages (race condition test ⑩),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          }
        ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Startup a Neo4J database
        run: |
          docker run \
              --publish=7474:7474 \
              --publish=7687:7687 \
              --env=NEO4J_AUTH=none \
              --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes neo4j:${{ env.NEO4J_ENTERPRISE_VERSION }} &
      - name: Wait for database to be ready
        uses: iFaxity/wait-on-action@v1
        with:
          resource: http://localhost:7474
      - name: Test loading ${{ matrix.language.name }}
        run: |
          pip3 install -r requirements.txt
          pip3 install -e .
          python3 ${{ matrix.language.load-script }}
        env:
          NEO4J_URI: ${{ env.TEST_NEO4J_URI }}
          NEO4J_DATABASE: ${{ env.TEST_NEO4J_DATABASE }}
          NEO4J_USERNAME: ${{ env.TEST_NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ env.TEST_NEO4J_PASSWORD }}

  load-neo4j:
    needs: tests-wilhelm-vocabulary-loading
    if: github.ref == 'refs/heads/master'
    uses: ./.github/workflows/load-neo4j.yaml
    secrets: inherit

  package:
    name: Test Package Build
    needs: [tests-wilhelm-vocabulary-loading]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Test dist build
        run: python setup.py sdist

  push-release-tag:
    needs: package
    if: github.ref == 'refs/heads/master'
    name: Bump Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Tag for release
        run: |
          git config --global user.name QubitPi
          git config --global user.email jack20220723@gmail.com
          .github/tag-for-release.bash

  release:
    name: Publish Python SDK To PyPI
    if: github.ref == 'refs/heads/master'
    needs: push-release-tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Bump version
        run: |
          git pull
          VERSION=$(git describe)
          echo "INFO Last tag: $VERSION"
          sed -i "s/    version=\"0.0.1\",/    version=\"$VERSION\",/" setup.py
      - name: Package up SDK
        run: python setup.py sdist
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  documentation:
    name: Build the docs using Sphinx and push to gh-pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: setup python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Torch cpu
        run: pip install torch --index-url https://download.pytorch.org/whl/cpu
      - name: Install Flair dependencies
        run: pip install -e .
      - name: Install unittest dependencies
        run: pip install -r requirements-dev.txt
      - name: Install doc dependencies
        run: pip install -r docs/requirements.txt
      - name: Fetch git tags
        run: git fetch --tags origin
      - name: Build docs
        run: |
          sphinx-multiversion docs doc_build/
      - name: Load CNAME
        run: echo sdk.wilhelm.qubitpi.org > doc_build/master/CNAME
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./doc_build/master
